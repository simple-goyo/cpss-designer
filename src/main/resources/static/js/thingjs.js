var userId = getQueryVariable("userId");var entityId = getQueryVariable("entityId");var floorId = 0;var mapId = getQueryVariable("mapId");var mapUrl;var timer;var t;var markers = new Map();var entityStates = new Map();var coffee_machine;if (entityId != "") {    //跟踪人进入建筑    updateEntityState(entityId);    mapId = entityStates.get(entityId).mapId    floorId = entityStates.get(entityId).floorId} else {    //点击建筑，进入建筑}//根据mapId获取地图地址if (mapId == 17) {    mapUrl = "https://www.thingjs.com/static/models/storehouse";} else {    mapUrl = "https://www.thingjs.com/client/ThingJS/68612/686121570669188048";}var app = new THING.App({    // 场景地址    "url": mapUrl});app.on('load', function (ev) {    // new THING.widget.Button('移动物体', obj_translate);    var campus = ev.campus;    var floor = campus.buildings[0].floors[floorId];    // 将层级切换到楼层级别    app.level.change(floor);    //经纬度    var tjsLnglat = app.root.defaultCampus.extraData;    console.log(tjsLnglat);    // 第一次进入该楼层后 创建物体    // floor.one(THING.EventType.EnterLevel, function () {    //     // 位置    //     // 进入楼层层级后再创建 Thing    //     // 如果没有指定 parent ，则 parent 默认为该楼层    //     //添加新物体    // })    //t    coffee_machine = app.query('#coffee_machine')[0];    var aa = coffee_machine.position;    console.log(aa);    door = app.query('#door')[0];    door.playAnimation({ name: door.animationNames[0], loopType: '' });    // flash(coffee_machine);    // createUI();    create_html();    setTimeout(function () {        flash(coffee_machine);        test_create_ui()    }, 40000)    // delayRun(reset(coffee_machine),70000);//    new THING.widget.Button('恢复设置', reset);});app.on(THING.EventType.EnterLevel, '.Floor', function (ev) {    var floor = ev.object;    // 停止之前的请求    stopUpdate();    //开始请求新的    updateEntity(floor.id);})//获取参数function getQueryVariable(variable) {    var query = window.location.search.substring(1);    var vars = query.split("&");    for (var i = 0; i < vars.length; i++) {        var pair = vars[i].split("=");        if (pair[0] == variable) {            return pair[1];        }    }    return ("");}//轮询读取设备，更新当前楼层所拥有的设备function updateEntity(floorId) {    // 如果网站是 https 接口则对应 https 请求    // 如果网站是 http 接口则对应 http 请求即可    //用 JQurey 封装的 Ajax 方法进行数据对接    $.ajax({        type: "get",        url: "https://www.fastmock.site/mock/6d7390fcdf2371787e4606d0bbe4db1f/indoor/getEntityByFloorId",        data: {"floorId": floorId}, //发送到服务器的数据        dataType: "json", // 返回的数据类型 json        success: function (entitys) { //请求成功后的回调函数 entitys是服务器返回的数据            // console.log("updateEntity:", entitys);            //更新设备的属性字典            for (var i = 0; i < entitys.length; i++) {                updateEntityState(entitys[i] + "");            }            // 每隔3s 请求一次数据            timer = setTimeout(function () {                //显示设备                showEntity(entitys);//先显示图元                updateEntity(floorId);            }, 1000);        }    });}//更新目前的entity对应的属性字典function updateEntityState(entityId) {    var url = "https://www.fastmock.site/mock/6d7390fcdf2371787e4606d0bbe4db1f/indoor/getEntityStateByEntityId"    // url += entityId;    $.ajax({        type: "get",        url: url,        async: false,        data: {"entityId": entityId},        dataType: "json", // 返回的数据类型 json        success: function (entityState) {            // var key=parseInt(state.id[0]);            var key = entityState.id[0];            // console.log(entityState)            // console.log("updateEntityState", entityState);            entityStates.set(key, entityState);        }    });}//展示实体（包括更新）function showEntity(entitys) {    markers.forEach(function (marker, key, map) {        if (entitys.indexOf(parseInt(key)) >= 0) {            //标记依旧存在，不做任何操作        } else {            // 标记地图不存在了（old data in map），删除老标记            // markers.get(key).setMap(null);高德地图api            marker.destroy();            marker = null;        }    });    $.each(entitys, function (index, entityId) {        if (markers.get(entityId + "") != null) {            //标记已存在，不做任何操作        } else {            // 标记不存在(查到的数据不在地图上)，需要新增            addNewMaker(entityId);        }    });    if (entityId != "") {        var majorEntity = markers.get(entityId)        majorEntity.on('update', function () {            // 摄像机位置为 移动小车后上方            // 为了便于计算 这里用了坐标转换 将相对于小车的位置 转换为 世界坐标            app.camera.position = majorEntity.selfToWorld([0, 5, -5]);            // 摄像机目标点为 移动小车的坐标            app.camera.target = majorEntity.position        }, '自定义摄影机跟随');    }    //参数 value key map    entityStates.forEach(function (state, key, map) {        var marker = markers.get(key);        if (typeof marker == "undefined") {            return;        }        //更新位置·状态        // var x = parseInt(state.x);        // var y = parseInt(state.y);        // console.log([y, 0, x]);        // console.log("updateShowEntityState", marker);        //移动        if(key=="1"){            marker.moveTo({                position: [state.y, state.z, state.x], // 相对自身 向后移动到 10m 处                time: 2 * 1000,                orientToPath: true,                complete: function (ev) {                    // console.log(ev.object.name + '移动完成');                }            });        }else{            marker.moveTo({                position: [state.y, state.z, state.x], // 相对自身 向后移动到 10m 处                time: 2 * 1000,                orientToPath: false,                complete: function (ev) {                    // console.log(ev.object.name + '移动完成');                }            });        }        console.log("这是获取的状态团")        console.log(state)        //更新显示其他状态，entityStates.state.forEach]        for (var stateKey in state.otherState) {            swichOtherState(marker, stateKey, state.otherState[stateKey]);        }    });}// // 创建Thing// var obj = app.create({//    type: 'Thing',//    name: '办公男',//    url: '/api/models/D409E09B3BED44B0952817FFDE75FC47/0/gltf/',//    // 模型地址//    position: [0, 0, 0],//    // 位置//    angle: 0,//    // 旋转//    complete: function () {//        console.log('thing created: ' + this.id);//    }// });function addNewMaker(entityId) {    var state = entityStates.get("" + entityId);    if (typeof state == "undefined") {        return;    }    // 新增状态动画    //1.初始位置    //todo:type，name，url    var x = parseInt(state.x);    var y = parseInt(state.y);    var z = parseInt(state.z);    // console.log([y, 5, x]);    var name=state.type+state.id[0];    var type3dUrl=state.type3d.url;    var marker = app.create({        type: 'Thing',        name: 'mycar',        position: [y, z, x],        // 位置        angle: 0,        url: type3dUrl,        complete: function (ev) {            // 打印结果：创建的物体父亲为该楼层            // console.log('thing created: ' + ev.object.parent.id);        }    });    markers.set("" + entityId, marker);    //    marker.on('click', function(ev) {        var obj = ev.object;        obj.on('update', function () {            // 摄像机位置为 移动小车后上方            // 为了便于计算 这里用了坐标转换 将相对于小车的位置 转换为 世界坐标            app.camera.position = obj.selfToWorld([0, 5, -5]);            // 摄像机目标点为 移动小车的坐标            app.camera.target = obj.position        }, '自定义摄影机跟随');    });}// 停止请求数据function stopUpdate() {    clearTimeout(timer);}/** * 遍历所有其他状态，采取对应函数显示对应状态 */function swichOtherState(marker, key, value) {    switch (key) {        case "load":            //showProcess(marker, value)            load(marker,value);            break;        case "进度":            flash(coffee_machine);            console.log(value)            document.getElementById('prog').value = parseInt(value)            test_create_ui()            // destroy_ui()            break;        default:        // 默认代码块    }}/**动画效果*/function load(marker,value){    if(value == 1){        // marker.style.outlineColor = '#ff0000';        marker.style.color = '#ff0000';        flash(marker);    }}// 设置闪烁function flash(item) {    item.on('update', function () {        item.style.opacity = 0.5 + 0.5 * Math.sin(2 * app.elapsedTime / 1000);    }, '每帧改变透明度');}//取消闪烁function reset() {    coffee_machine.style.opacity = 1.0;    // car.style.color = null;    coffee_machine.off('update', null, '每帧改变透明度');    clearTimeout(t);}//更新process状态function showProcess(marker, value) {}//更新power状态// 移动，z轴方向// function obj_translate() {//     // car1.translate([0, 0, -1]);//     car1.moveTo({//         position: [0, 5, -15], // 相对自身 向后移动到 10m 处//         time: 2 * 1000,//         orientToPath: false,//         complete: function (ev) {//             console.log(ev.object.name + '移动完成');//         }//     });// }// app.one(THING.EventType.EnterLevel, '.Building', function (ev) {//     var building = ev.object;//     // 界面组件//     var panel = new THING.widget.Panel({//         titleText: 'Building',//         hasTitle: true, // 是否有标题//     });//     // 创建数据对象//     var dataObj = {//         checkbox: {//             '获取 facade': false,//             '获取 floors': false,//         },//         '展开楼层': false,//         '显示屋顶2': false//     };//     // 界面绑定对象//     var check = panel.addCheckbox(dataObj, 'checkbox');//     check[0].on('change', function (ev) {//         // 获取建筑外立面//         building.facades.visible = ev;//     })//     check[1].on('change', function (ev) {//         // 获取建筑楼层集合//         var floors = building.floors;//         if (ev) {//             floors.style.opacity = 0.5;//         }//         else {//             floors.style.opacity = 1;//         }//     })//     var control01 = panel.addBoolean(dataObj, '展开楼层');//     control01.on('change', function (ev) {//         if (building.expanded) {//             // 合并楼层//             building.unexpandFloors({//                 time: 1000,//                 complete: function () {//                     console.log('合并完毕')//                 }//             })//         }//         else {//             // 展开楼层//             building.expandFloors({//                 time: 1000,//                 distance: 10,//                 horzMode: false, // 填 true 时为横向展开楼层//                 complete: function () {//                     console.log('展开完毕')//                 }//             })//         }//     })//     var control02 = panel.addBoolean(dataObj, '显示屋顶1');//     control02.on('change', function (ev) {//         // 显示、隐藏屋顶//         building.showAllRoofs(ev);//     })// })//创造bar htmlfunction create_html() {    var sig =        '<div class="sign" id="board" style="font-size: 12px;width: 120px;text-align: center;background-color: rgba(0, 0, 0, .6);border: 3px solid #eeeeee;border-radius: 8px;color: #eee;position: absolute;top: 0;left: 0;z-index: 10;display: none;">' +        '<label id="number" ></label>' +        '<progress id="prog" value="0" max="100"></progress>' +        '</div>'    $('#div3d').append($(sig));}// 生成一个新面板function create_element() {    var srcElem = document.getElementById('board');    var newElem = srcElem.cloneNode(true);    newElem.style.display = "block";    app.domElement.insertBefore(newElem, srcElem);    return newElem;}// 物体顶界面var ui = null;function test_create_ui() {    ui = app.create({        type: 'UIAnchor',        parent: app.query('#coffee_machine')[0],        element: create_element(),        localPosition: [0, 2, 0],        pivot: [0.5, 1] //  [0,0]即以界面左上角定位，[1,1]即以界面右下角进行定位    });    start()}// 删除界面function destroy_ui() {    if (ui) {        ui.destroy();        ui = null;    }}//在左上角画面板// function createUI() {//     // new THING.widget.Button('运行', start);//     new THING.widget.Button('制作咖啡', test_create_ui);// }//进度条function start() {    value = parseInt(document.getElementById('prog').value);    // console.log(value)    // console.log(typeof(value))    document.getElementById('prog').value = (value + 3).toString();    document.getElementById('number').innerHTML = "咖啡制作进度" + value.toString() + "%";    t = setTimeout('start()', 100);    if (value >= 100) {        document.getElementById('number').innerHTML = "咖啡制作完成"        reset();        console.log("咖啡制作完成")    }}/** * 系统右键点击事件 */app.on('dblclick', function(ev) {    console.log('dblClick');    // e.button 0 为左键 2为右键    markers.forEach(function (marker, key, map) {        marker.off("update", null, '自定义摄影机跟随')    });});