var userId = getQueryVariable("userId");var entityId = getQueryVariable("entityId");var floorId = 0;var mapId = getQueryVariable("mapId");var mapUrl;var actionTimer;var entityTimer;var t;var markers = new Map();var entityStates = new Map();var coffee_machine;var actionId;//知道当前是哪一个action,在控制台显示对应的文字。var actionName;var dataObj = {    // "服务监控":'https://www.baidu.com'    "服务监控": 'https://www.cpss2019.fun:8899/tpl/select-resource.html'}if (entityId != "") {    //跟踪人进入建筑    updateEntityState(entityId);    mapId = entityStates.get(entityId).mapId    floorId = entityStates.get(entityId).floorId} else {    //点击建筑，进入建筑}//根据mapId获取地图地址if (mapId == 17) {    mapUrl = "/client/ThingJS/68612/686121573254374838";} else {    mapUrl = "https://www.thingjs.com/client/ThingJS/68612/686121570669188048";}var app = new THING.App({    // 场景地址    "url": mapUrl});// // 创建Thing// var obj = app.create({//    type: 'Thing',//    name: 'weight',//    url: '/api/models/20f062593114473e96d210f988d038a4/0/gltf/',//    // 模型地址//    position: [0, 0, 4],//    // 位置//    angle: 0,//    // 旋转//    complete: function () {//        console.log('thing created: ' + this.id);//    }// });// // 创建Thing// var obj = app.create({//    type: 'Thing',//    name: 'Air_cleaner',//    url: '/api/models/d248e258c48a44ae878a4d8a6b45be75/0/gltf/',//    // 模型地址//    position: [0, 0, 5],//    // 位置//    angle: 0,//    // 旋转//    complete: function () {//        console.log('thing created: ' + this.id);//    }// });// // 创建Thing// var obj = app.create({//    type: 'Thing',//    name: 'Airbox',//    url: '/api/models/2fd62841cc1a461fb42505ce642b0879/0/gltf/',//    // 模型地址//    position: [0, 0, 6],//    // 位置//    angle: 0,//    // 旋转//    complete: function () {//        console.log('thing created: ' + this.id);//    }// });// // 创建Thing// var obj = app.create({//    type: 'Thing',//    name: 'kettle',//    url: '/api/models/661acd83fa53426bb83a3ab1541a8c3d/0/gltf/',//    // 模型地址//    position: [0, 0, 7],//    // 位置//    angle: 0,//    // 旋转//    complete: function () {//        console.log('thing created: ' + this.id);//    }// });app.on('load', function (ev) {    // new THING.widget.Button('移动物体', obj_translate);    var campus = ev.campus;    var floor = campus.buildings[0].floors[floorId];    // 将层级切换到楼层级别    app.level.change(floor);    // stopUpdate();    //开始请求新的    // updateAction();    getAppInstanceId();    //经纬度    // var tjsLnglat = app.root.defaultCampus.extraData;    // console.log(tjsLnglat);    // 第一次进入该楼层后 创建物体    // floor.one(THING.EventType.EnterLevel, function () {    //     // 位置    //     // 进入楼层层级后再创建 Thing    //     // 如果没有指定 parent ，则 parent 默认为该楼层    //     //添加新物体    // })    //t    // coffee_machine = app.query('#coffee_machine')[0];    // var aa = coffee_machine.position;    // console.log(aa);    // door = app.query('#door')[0];    // door.playAnimation({ name: door.animationNames[0], loopType: '' });    // flash(coffee_machine);    // createUI();    // setTimeout(function () {    //     flash(coffee_machine);    //     test_create_ui();    // }, 10000)    // delayRun(reset(coffee_machine),70000);//    new THING.widget.Button('恢复设置', reset);});// // 表格数据// var tableData = {// 	// 列标题// 	props: ['', '测试时间'],// 	// 列数据// 	items: [// 	]// };// var tabData = {// 	'进程列表': {// 	},// 	'动作流程': {// 	},// 	'资源列表': {// 	}// };// // 定义各标签页中的 数据表格 数据// var tablesData = {// 	'进程列表': {// 		props: ['进程id','进程名称', '开始时间', '完成状态'],// 		items: [//             {// 			"进程id": 'T1',// 			"进程名称": '锻炼屋',// 			"开始时间": '2019.10.22 15:15:00',// 			'完成状态': '30%'// 		},//         {// 			"进程id": 'T2',// 			"进程名称": '喝咖啡',// 			"开始时间": '2019.10.22 17:15:00',// 			'完成状态': '50%'// 		},// 		{// 			"进程id": 'T3',// 			"进程名称": '喝咖啡',// 			"开始时间": '2019.10.22 17:25:00',// 			'完成状态': '0%'// 		}// 		]// 	},// 	'资源列表': {// 		props: ['资源id', '资源名称'],// 		items: [{// 			"资源id": 'R12',// 			"资源名称": '咖啡机',// 		},// 		{// 			"资源id": 'R22',// 			"资源名称": '水杯',// 		},// 		{// 			"资源id": 'R32',// 			"资源名称": '服务员',// 		}// 		]// 	},// }// // 创建数据对象// var dataObj = {// 	checkbox: { '设备1': false, '设备2': false, '设备3': true, '设备4': true },// 	radio: '摄像头01',// 	open: true,// 	value: 5.0,// 	iframe: 'https://www.processon.com/view/link/5d91a755e4b011ca2ab46d50'// };var panel = THING.widget.Panel({    titleText: '监控面板',    width: '350px',    closeIcon: true,    // 面板是否支持拖拽功能    dragable: true,    // 面板是否支持收起功能    retractable: true,    hasTitle: true, // 设置标题});// 向 Panel 中添加 Tab 标签页// var tab = panel.addTab(tabData);// for (var key in tablesData) {// 	// 通过 link 向 Tab 标签页中 关联表格// 	panel.addTable(tablesData[key]).link(key);// }// 加载iframe组件var iframe = panel.addIframe(dataObj, '服务监控').setHeight("600px");// panel.remove(ac);//轮询读取设备// function updateAction() {//     // 如果网站是 https 接口则对应 https 请求//     // 如果网站是 http 接口则对应 http 请求即可//     $.ajax({//         type: "get",//         url: "https://www.fastmock.site/mock/6d7390fcdf2371787e4606d0bbe4db1f/indoor/aa",//         dataType: "json", // 返回的数据类型 json//         success: function (aId) {//             // console.log("displayAction:",[aId]);//             if(aId!=actionId){//                 actionId=aId;//                 //在界面中显示action名称//                 if(actionId!=0){//                     showAction();//                 }//             }//             // 每隔3s 请求一次数据//             actionTimer = setTimeout(function () {//                 updateAction();//             }, 1000);//         }//     });// }// // var aaaa=true// function showAction(){//     if(actionId==1){//      flash(coffee_machine);//      test_create_ui();//     //  aaaa=false;//     }else{//         // destroy_ui();//         // aaaa=true//         destroy_process();//     }//     var actionlist=["环视介绍","做咖啡","取杯子","取杯子","取杯子","接咖啡","接咖啡","送咖啡","送咖啡","送咖啡","送咖啡"];//     console.log("当前正在执行:",actionlist[actionId]);//     if(actionlist[actionId]!=actionName){//         actionName=actionlist[actionId];//         var d = new Date();// 	    var time = d.toLocaleTimeString();// 	    tableData.props[0] = actionName;//         tableData.props[1] = time;//         // panel.addTable(tableData);//     }// }// 创建Thing// //轮询读取设备，更新当前楼层所拥有的设备// function updateEntity(floorId) {//     // 如果网站是 https 接口则对应 https 请求//     // 如果网站是 http 接口则对应 http 请求即可//     //用 JQurey 封装的 Ajax 方法进行数据对接//     $.ajax({//         type: "get",//         url: "https://www.fastmock.site/mock/6d7390fcdf2371787e4606d0bbe4db1f/indoor/getEntityByFloorId",//         data: {"floorId": floorId}, //发送到服务器的数据//         dataType: "json", // 返回的数据类型 json//         success: function (entitys) { //请求成功后的回调函数 entitys是服务器返回的数据//             // console.log("updateEntity:", entitys);//             //更新设备的属性字典//             for (var i = 0; i < entitys.length; i++) {//                 updateEntityState(entitys[i] + "");//             }//             // 每隔3s 请求一次数据//             entityTimer = setTimeout(function () {//                 //显示设备//                 showEntity(entitys);//先显示图元//                 updateEntity(floorId);//             }, 1000);//         }//     });// }var mapEntity = [];function getAppInstanceId() {    console.log("21")    var url = "https://www.cpss2019.fun:5001/get_app_show";    $.ajax({        type: "get",        url: url,        data: {"user_id": "1"}, //发送到服务器的数据        success: function (res) { //请求成功后的回调函数 entitys是服务器返回的数据            appInstanceId = res.app_show.instance_id;            entityTimer = setTimeout(function () {                //alert(appInstanceId);                //   debugger                if (appInstanceId != "") {                    updateEntity(appInstanceId);                }                getAppInstanceId();            }, 5000);        },        error: function () {            // getAppInstanceId();        }    });}//轮询读取设备，更新当前楼层所拥有的设备function updateEntity(appInstanceId) {    // 如果网站是 https 接口则对应 https 请求    // 如果网站是 http 接口则对应 http 请求即可    //用 JQurey 封装的 Ajax 方法进行数据对接    var url = "https://www.cpss2019.fun:5001/get_app_instance_action_state_and_resource_by_instance_id";    //var oldRes = [];//同一个资源状态改变会不会重新写进去数据    $.ajax({        type: "get",        url: url,        data: {"app_instance_id": appInstanceId}, //发送到服务器的数据        dataType: "json", // 返回的数据类型 json        success: function (res) { //请求成功后的回调函数 entitys是服务器返回的数据            // console.log("updateEntity:", entitys);            //更新设备的属性字典            //alert("success"            for (var i = 0; i < res.length; i++) {                var resource_id = res[i].resource_id;                var resource_instance_id = res[i].resource_instance_id;                updateEntityState(resource_id, resource_instance_id);            }            //showToolbarIcon();            showMapEntity(mapEntity);            // 每隔3s 请求一次数据            // entityTimer = setTimeout(function () {            //    //显示设备            //    showEntity(res);//先显示图元            //    updateEntity(floorId);            // }, 5000);        },        error: function () {            alert("false");        }    });}//更新目前的entity对应的属性字典function updateEntityState(resource_id, resource_instance_id) {    var url = "https://www.cpss2019.fun:5001/get_resource_info"    // url += entityId;    $.ajax({        type: "post",        url: url,        async: false,        data: JSON.stringify(resource_instance_id),        contentType: "application/json",        dataType: "json", // 返回的数据类型 json        success: function (res) {            // debugger            // var key=parseInt(state.id[0]);            var key = resource_id;            var value = res[0];            entityStates.set(key, value);            showEntity(res[0].name, resource_id);        }    });}//上方显示资源var toolbar1 = new THING.widget.Panel({});toolbar1.position = [500, 0];var dataObj = {    state: "false",}var resNum;//查询资源var icon = [];function showToolbarIcon() {    resNum = 0;    var title = "Keep"    var imgUrl = 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3405299795,1836363849&fm=26&gp=0.jpg'    icon[0] = toolbar1.addImageBoolean(dataObj, 'state').caption(title).imgUrl(imgUrl);    resNum++;}//显示资源function showEntity(name, resource_id) {    //清除toolbar内容    if (resNum > 0) {        for (var j = 0; j < resNum; j++) {            toolbar1.remove(icon[j]);        }    }    // 判断类型    if (name == "tv") {        showToolbarIcon();    } else {        mapEntity.push(resource_id);    }}//显示现实世界资源function showMapEntity(entitys) {    markers.forEach(function (marker, key, map) {        if (entitys.indexOf(parseInt(key)) >= 0) {            //标记依旧存在，不做任何操作        } else {            // 标记地图不存在了（old data in map），删除老标记            // markers.get(key).setMap(null);高德地图api            marker.destroy();            marker = null;        }    });    $.each(entitys, function (index, entityId) {        if (markers.get(entityId + "") != null) {            //标记已存在，不做任何操作        } else {            // 标记不存在(查到的数据不在地图上)，需要新增            addNewMaker(entityId);        }    });    if (entityId != "") {        var majorEntity = markers.get(entityId)        majorEntity.on('update', function () {            // 摄像机位置为 移动小车后上方            // 为了便于计算 这里用了坐标转换 将相对于小车的位置 转换为 世界坐标            app.camera.position = majorEntity.selfToWorld([0, 5, -5]);            // 摄像机目标点为 移动小车的坐标            app.camera.target = majorEntity.position        }, '自定义摄影机跟随');    }    //参数 value key map    entityStates.forEach(function (state, key, map) {        var marker = markers.get(key);        if (typeof marker == "undefined") {            return;        }        //更新位置·状态        // var x = parseInt(state.x);        // var y = parseInt(state.y);        // console.log([y, 0, x]);        // console.log("updateShowEntityState", marker);        //移动        if (key == "1") {            marker.moveTo({                position: [state.y, state.z, state.x], // 相对自身 向后移动到 10m 处                time: 2 * 1000,                orientToPath: true,                complete: function (ev) {                    // console.log(ev.object.name + '移动完成');                }            });        } else {            marker.moveTo({                position: [state.y, state.z, state.x], // 相对自身 向后移动到 10m 处                time: 2 * 1000,                orientToPath: false,                complete: function (ev) {                    // console.log(ev.object.name + '移动完成');                }            });        }        // console.log("这是获取的状态团")        // console.log(state)        //更新显示其他状态，entityStates.state.forEach]        for (var stateKey in state.otherState) {            swichOtherState(marker, stateKey, state.otherState[stateKey]);        }    });}function addNewMaker(entityId) {    var entity = entityStates.get("" + entityId);    var state = entity.labels    if (typeof state == "undefined") {        return;    }    // 新增状态动画    //1.初始位置    //todo:type，name，url    debugger    var x = parseInt(state.x);    var y = parseInt(state.y);    var z = 0;    var id = "entity" + entityId;    // console.log([y, 5, x]);    // var name=state.type+state.id[0];    // 资源图    var type3dUrl = {        "weight": "/api/models/20f062593114473e96d210f988d038a4/0/gltf/",        "smartbox": "/api/models/2fd62841cc1a461fb42505ce642b0879/0/gltf/",        "purifier": "/api/models/d248e258c48a44ae878a4d8a6b45be75/0/gltf/",        "kettle": "/api/models/661acd83fa53426bb83a3ab1541a8c3d/0/gltf/"    }    var type = state["io.fusionapp.smarthome/type"]    var url = type3dUrl[type]    // var marker = app.create({    //     type: 'Thing',    //     name: 'mycar',    //     id:id,    //     position: [0, 0, 5],    //     // 位置    //     angle: 0,    //     url: url,    //     complete: function (ev) {    //         // 打印结果：创建的物体父亲为该楼层    //         // console.log('thing created: ' + ev.object.parent.id);    //     }    // });    var marker = app.create({        type: 'Thing',        name: 'Air_cleaner',        url: '/api/models/d248e258c48a44ae878a4d8a6b45be75/0/gltf/',        // 模型地址        position: [0, 0, 5],        // 位置        angle: 0,        // 旋转        complete: function () {            console.log('thing created: ' + this.id);        }    });    markers.set("" + entityId, marker);    //    marker.on('click', function (ev) {        var obj = ev.object;        obj.on('update', function () {            // 摄像机位置为 移动小车后上方            // 为了便于计算 这里用了坐标转换 将相对于小车的位置 转换为 世界坐标            app.camera.position = obj.selfToWorld([0, 5, -5]);            // 摄像机目标点为 移动小车的坐标            app.camera.target = obj.position        }, '自定义摄影机跟随');    });}// 停止请求数据function stopUpdate() {    clearTimeout(actionTimer);    clearTimeout(entityTimer);}/** * 遍历所有其他状态，采取对应函数显示对应状态 */function swichOtherState(marker, key, value) {    switch (key) {        case "load":            //showProcess(marker, value)            load(marker, value);            break;        case "进度":            flash(coffee_machine);            // console.log(value)            document.getElementById('prog').value = parseInt(value)            test_create_ui()            // destroy_ui()            break;        case "message":            show_message(marker, value);        default:        // 默认代码块    }}/**动画效果*/function load(marker, value) {    if (value == 1) {        // marker.style.outlineColor = '#ff0000';        marker.style.color = '#ff0000';        flash(marker);    } else {        marker.style.color = '#000000';        marker.off('update', null, '每帧改变透明度');    }}// 设置闪烁function flash(item) {    item.on('update', function () {        item.style.opacity = 0.5 + 0.5 * Math.sin(2 * app.elapsedTime / 1000);    }, '每帧改变透明度');}//取消闪烁function reset() {    coffee_machine.style.opacity = 1.0;    // car.style.color = null;    coffee_machine.off('update', null, '每帧改变透明度');    clearTimeout(t);}//更新process状态function showProcess(marker, value) {}//更新power状态//创造bar html// 物体顶界面var ui = null;function test_create_ui() {    ui = app.create({        type: 'UIAnchor',        parent: app.query('#coffee_machine')[0],        element: create_element(),        localPosition: [0, 1, 0],        pivot: [0.5, 1] //  [0,0]即以界面左上角定位，[1,1]即以界面右下角进行定位    });    start()}// 生成一个新面板function create_element() {    create_html();    var srcElem = document.getElementById('board');    var newElem = srcElem.cloneNode(true);    newElem.style.display = "block";    app.domElement.insertBefore(newElem, srcElem);    return newElem;}function create_html() {    var sig =        '<div class="sign process" id="board" style="font-size: 12px;width: 120px;text-align: center;background-color: rgba(0, 0, 0, .6);border: 3px solid #eeeeee;border-radius: 8px;color: #eee;position: absolute;top: 0;left: 0;z-index: 10;display: none;">' +        '<label id="number" ></label>' +        '<progress id="prog" value="0" max="100"></progress>' +        '</div>'    $('#div3d').append($(sig));}// 删除界面function destroy_ui() {    if (ui) {        ui.destroy();        // ui = null;    }}// 删除界面function destroy_el() {    $('.mymessage').remove();}// 删除界面function destroy_process() {    $('.process').remove();}//在左上角画面板// function createUI() {//     // new THING.widget.Button('运行', start);//     new THING.widget.Button('制作咖啡', test_create_ui);// }//进度条function start() {    value = parseInt(document.getElementById('prog').value);    // console.log(value)    // console.log(typeof(value))    document.getElementById('prog').value = (value + 3).toString();    document.getElementById('number').innerHTML = "咖啡制作进度" + value.toString() + "%";    t = setTimeout('start()', 100);    if (value >= 100) {        document.getElementById('number').innerHTML = "咖啡制作完成"        reset();        console.log("咖啡制作完成")    }}//显示物体消息function show_message(marker, content) {    //增加html    var sig =        '<div class="sign mymessage" id="board" style="font-size: 12px;width: 120px;text-align: center;background-color: rgba(0, 0, 0, .6);border: 3px solid #eeeeee;border-radius: 8px;color: #eee;position: absolute;top: 0;left: 0;z-index: 10;display: none;"> <p>this is test </p > </div>'    $('#div3d').append($(sig));    var markerId = "#" + marker.id    // debugger    //绑定marker    ui = app.create({        type: 'UIAnchor',        parent: app.query(markerId)[0],        element: function () {            var srcElem = document.getElementById('board');            var newElem = srcElem.cloneNode(true);            newElem.style.display = "block";            app.domElement.insertBefore(newElem, srcElem);            return newElem;        }(),        localPosition: [0, 1, 0],        pivot: [0.5, 1] //  [0,0]即以界面左上角定位，[1,1]即以界面右下角进行定位    });    //显示内容    if (content == "") {        // console.log("nothing to show")        ui.destroy();        destroy_el();//   ui = null;    }    else {        document.getElementById("board").innerHTML = content        setTimeout(function () {            ui.destroy();            destroy_el();            //   ui = null;            // console.log("already clear")        }, 3000)    }}/** * 系统事件 */app.on(THING.EventType.EnterLevel, '.Floor', function (ev) {    var floor = ev.object;    // 停止之前的请求})app.on('dblclick', function (ev) {    console.log('dblClick');    // e.button 0 为左键 2为右键    markers.forEach(function (marker, key, map) {        marker.off("update", null, '自定义摄影机跟随')    });});/**系统工具方法*///获取参数function getQueryVariable(variable) {    var query = window.location.search.substring(1);    var vars = query.split("&");    for (var i = 0; i < vars.length; i++) {        var pair = vars[i].split("=");        if (pair[0] == variable) {            return pair[1];        }    }    return ("");}